<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="model_1.htm">
<LINK REL=UP HREF="mode_122.htm">
<LINK REL=PREV HREF="mode_123.htm">
<LINK REL=NEXT HREF="mode_125.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=bootstrap.min.css TYPE="text/css"><LINK TITLE="WebMaker generated style" REL=stylesheet HREF=style.css TYPE="text/css">
<TITLE>6.3.2   SYNTAX</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental)">
</HEAD>
<BODY CLASS=WM-BODY><div class="container">

  <DIV>
<A NAME=HEADING124></A>

<DIV CLASS=WM-DIV-HEADERS>
<P><A HREF="mode_125.htm" class="NavPanel pull-right">[Next]</A> <A HREF="mode_123.htm" CLASS=NavPanel>[Previous]</A> <A HREF="mode_122.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>6.3   MODEL STATICS</P>

</DIV>
<A NAME=HEADING124-0></A>
<H1 CLASS=3Heading>6.3.2   SYNTAX</H1>
<P> A modeling language is defined here to be a set of symbols used to communicate the representative structure, and perhaps meaning, of a thing. The nodes and links and their sub-classes form the initial elements of a modeling language. At most, an object can be a model of another modeling language, containing its own syntactic constructs. At least, the object can contain a base value. For purposes of distinction, an object that stands for a model is designated as a complex object. And an object that contains a sole value is a simple object.</P>
<P> To illustrate the components of a modeling language, let it be said that there exists a universal modeling language "L" that consists of an infinite number of objects and links. A constraining function is applied to either declare the availability of certain objects and links or declare the unavailability of certain entities. An enumerable set of objects and links serves to define a new modeling language L', which bounds a morphological space within which to author a model, outside of which no other objects or links exist. </P>
<P> Within L' itself, there are no limits to the object and link combinations. Further constraint on L' is achieved by limiting certain objects to relations by certain links. Whereby L' dictates what objects and links can be used, the new syntactical model L'' dictates the combination, or syntax, of these objects and links. <A HREF="#MARKER-9-94" CLASS=Body>Figure 70</A> illustrates the consecutive constraining of the universe L through the morphology space to arrive at the syntactic space of modeling language L''.</P>
<P> A modeling environment provides the designer with a set of objects and methods with which to construct models. A finite set of objects and methods leads to a finite set of combinations. This combination set defines the "constraint space". Models built with given object and method sets reside entirely within this constraint space. Modeling using the given sets is constrained to a given space, there is conceptually no element or combination which exists outside of the constraint space.</P>
<P> The enumeration of all combinations of a large set of objects becomes NP-hard as the sets become large. Not all combinations of objects and methods are valid. There are two tracks to take in bounding the constraint space. The first is to specify valid combinations, and the specification of all valid combinations may be exhausting. There is a point when the set of invalid combinations is smaller and more easily defined than the set of all potential valid combinations. This second track is to define only the invalid combinations; the space defined by this set of invalid combinations is the "detection space". </P>
<P> The detection space is not necessary a subset of the constraint space. A detection space may contain elements which exist outside of a given constraint space. A detection space may be described by rules which indicate invalid configurations within the constraint space.</P>
<P>Figure 70    <A NAME=MARKER-9-94></A>Bounding  Spaces of Modeling Language</P><P><IMG ALIGN=TOP SRC=mo12im63.gif>
<P> A simple example of the three stages in the constructions of a modeling language starts with the universal L. Let us say that this model consists of all possible sound objects and sound sequence links utterable by man. The morphology model L' limits these utterances to only those that can be found represented as words in an English dictionary. The syntactic model, L'', is described by a book on English grammar, indicating the correct linkage of words into proper sentence structures. </P>
<P> <A HREF="#MARKER-9-95" CLASS=Body>Figure 71</A> illustrates the morphology space of a Complex Feature modeling language similar to the onedim presentation. Here are all the simple-features and the link available to describe a complex feature topologically. <A HREF="#MARKER-9-96" CLASS=Body>Figure 72</A> illustrates a mounting stud model instantiated out of the complex feature language. Note that the Blind_Hole entity is defined as of a Blind_Hole type, while the boss model is defined from a different, Boss type.</P>
<P>Figure 71    <A NAME=MARKER-9-95></A>Morphological Elements of the Complex Feature Modeling Language</P><P><IMG ALIGN=TOP SRC=mo12im64.gif>
<P>Figure 72    <A NAME=MARKER-9-96></A>Syntactic Model of Mounting Stud</P><P><IMG ALIGN=TOP SRC=mo12im65.gif>

</DIV>

 

<DIV>

<!-- TOC -->

</DIV>

 <DIV CLASS=WM-DIV-FOOTERS><HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>Models for Concurrent Engineering Design - 15 Jul 1997</ADDRESS>
<P><A HREF="mode_125.htm" class="NavPanel pull-right">[Next]</A> <A HREF="mode_123.htm" CLASS=NavPanel>[Previous]</A> <A HREF="mode_122.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>

</DIV>
</div></BODY>
</HTML>
