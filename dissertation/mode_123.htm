<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="model_1.htm">
<LINK REL=UP HREF="mode_122.htm">
<LINK REL=PREV HREF="mode_122.htm">
<LINK REL=NEXT HREF="mode_124.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=bootstrap.min.css TYPE="text/css"><LINK TITLE="WebMaker generated style" REL=stylesheet HREF=style.css TYPE="text/css">
<TITLE>6.3.1   NODES AND LINKS</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental)">
</HEAD>
<BODY CLASS=WM-BODY><div class="container">

  <DIV>
<A NAME=HEADING123></A>

<DIV CLASS=WM-DIV-HEADERS>
<P><A HREF="mode_124.htm" class="NavPanel pull-right">[Next]</A> <A HREF="mode_122.htm" CLASS=NavPanel>[Previous]</A> <A HREF="mode_122.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>6.3   MODEL STATICS</P>

</DIV>
<A NAME=HEADING123-0></A>
<H1 CLASS=3Heading>6.3.1   NODES AND LINKS</H1>
<P> A model is a planned or hypothetical representation of the attributes and behavior of some thing. During modeling, the actual values of the thing being modeled are not used. Rather, some representation of those values are used. By necessity, modeling requires classification and abstraction of elements such that an icon, index, or symbol is used to represent some value or values of the real model.</P>
<P> It is proposed that at the most abstract level, models comprise symbolic <EM CLASS="Emphasis Body">objects</EM> and relations between these objects, with objects connected to some underlying value or meaning in an iconic, indexed, or symbolic manner.</P>
<P> Relations between objects can be characterized as one to one, one to many, or many to many. These relations can be defined in terms of the <EM CLASS="Emphasis Body">link</EM>, where a simple link embodies the one to one relation between objects. Given simple links, the other, multiple relations can be built. A link as an entity includes, at minimum, the names of the two objects it relates. </P>
<P> In the onedim prototype, objects and links can both be considered first-order objects, equally explicit and directly accessible. Objects and links are the progenitors of types in the onedim system. A type enforces a framework or representation on an actual or potential value such that the mechanisms for viewing or manipulating that value are predetermined. As such, type indicates the process for retrieving and interpreting the value.</P>
<P> </P>
<P> For example, in computer programming languages, values are often typed as "characters", "integers", or "real". An object type of "real" stands for a model of a numeric entity in terms of an integer and a mantissa within the data space of computer memory. Additionally, the internal computation mechanisms manipulate values of different types differently. Integers and floating numbers, for example, involve different internal methods for multiplication. </P>
<P> More generally, a type defines a space in which values can be represented and understood. A type of a value can be considered as a model, for the definition of a model is that of a type as well: the representation of the attributes and behaviors of some thing. Types in and of themselves stand for a model of things. The node and link types basically categorize objects and relations of a model. These types allow for value-less modeling, where instances of a type can be declared, and constructions made of these instances.</P>
<P> Further types, in terms of a model for defining and evaluation complex features, would start with the basic elemental classes of ribs, bosses, and other simple features. <A HREF="#MARKER-9-92" CLASS=Body>Figure 68</A> illustrates the subclassification of types with respect to objects and links. Note that a preliminary class of simple features is added to distinguish feature of one class from other classes, such as animals and vegetables.</P>
<P> Because types indicate how the value is to be processed, they can be as intrinsic to the identity of an entity as its name. The notation of <A HREF="#MARKER-9-93" CLASS=Body>Figure 69</A> is used to decompose the classification hierarchy while preserving the information content on type relation. In doing so, the dimension requirements to represent the type-subtype relationship is reduced. The object's name and type are explicit in the same dimension; the behavior of that object is implicitly given with the type. An alternative to naming the type is to represent that type as an icon particular to that type, in much the same way that icons are used with graphical computer user interfaces.</P>
<P> Both <A HREF="#MARKER-9-92" CLASS=Body>Figure 68</A> and <A HREF="#MARKER-9-93" CLASS=Body>Figure 69</A> respectively explicitly and implicitly represent type hierarchies, but the latter representations, from the perspective of an individual object, declares the type outright and eliminates the dimension required for specifying the type relationships. This frees up a dimension for specifying inter-entity relationships.</P>
<P>Figure 68    <A NAME=MARKER-9-92></A>Type Relationship in Simple Features Classification</P><P><IMG ALIGN=TOP SRC=mo12im61.gif>
<P>Figure 69    <A NAME=MARKER-9-93></A>Onedim Object Representation</P><P><IMG ALIGN=TOP SRC=mo12im62.gif>

</DIV>

 

<DIV>

<!-- TOC -->

</DIV>

 <DIV CLASS=WM-DIV-FOOTERS><HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>Models for Concurrent Engineering Design - 15 Jul 1997</ADDRESS>
<P><A HREF="mode_124.htm" class="NavPanel pull-right">[Next]</A> <A HREF="mode_122.htm" CLASS=NavPanel>[Previous]</A> <A HREF="mode_122.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>

</DIV>
</div></BODY>
</HTML>
