<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="model_1.htm">
<LINK REL=UP HREF="model_50.htm">
<LINK REL=PREV HREF="model_50.htm">
<LINK REL=NEXT HREF="model_52.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=bootstrap.min.css TYPE="text/css"><LINK TITLE="WebMaker generated style" REL=stylesheet HREF=style.css TYPE="text/css">
<TITLE>3.3.1   COMBINATORIAL EXPLOSION</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental)">
</HEAD>
<BODY CLASS=WM-BODY><div class="container">

  <DIV>
<A NAME=HEADING51></A>

<DIV CLASS=WM-DIV-HEADERS>
<P><A HREF="model_52.htm" class="NavPanel pull-right">[Next]</A> <A HREF="model_50.htm" CLASS=NavPanel>[Previous]</A> <A HREF="model_50.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>3.3   FEATURE RECOGNITION ISSUES</P>

</DIV>
<A NAME=HEADING51-0></A>
<H1 CLASS=3Heading>3.3.1   COMBINATORIAL EXPLOSION</H1>
<P> Modeling systems such as Noodles are particularly rich in topological and geometric information concerning edges, faces, and vertices as well as their adjacency relations. The total number of elements in models based on industrial parts is usually large and features can be quite complex in their definition. Such abundance of information in geometric models makes a brute-force, pattern-matching approach to feature recognition practically intractable. It can be shown that the problem is NP-complete and the results could be characterized by a combinatorial explosion <A HREF="mode_160.htm#MARKER-9-150" CLASS=Body>[Gadh &amp; Prinz 91]</A>. </P>
<P> In addition to the problem of combinatorial explosion, there exists the problem of variation due to the topological variation. This is related to a given representation and the modeling system being used. Noodles, for instance, currently linearizes its surfaces and this linearization can be done to any level of refinement. For example, a conical boss can be roughly represented with eight sides or use a more refined representation involving thirty two sides. Topological variations are due primarily to the chosen representation and not the underlying part geometry. </P>
<P> Apart from topological variations, the actual geometric shape and configuration of a feature will vary. Not all variations will define a new shape feature. As such, feature extraction techniques must effectively deal with legitimate design variations which either deviate from the definition of an ideal feature or involve multiple features. </P>
<P> There are several published techniques to recognize features from low-level CAD data. Most employ boundary-representation graphs using face-edge-vertex (F-E-V) information. A template feature, defined in terms of the given graph, is matched against the given model to isolate a sub-graph <A HREF="mode_160.htm#MARKER-9-130" CLASS=Body>[Chuang &amp; Henderson 90]</A><A HREF="mode_160.htm#MARKER-9-137" CLASS=Body>[de Floriani and Bruzzone]</A><A HREF="mode_160.htm#MARKER-9-145" CLASS=Body>[Finger &amp; Safier 90]</A> <A HREF="mode_160.htm#MARKER-9-151" CLASS=Body>[Gavankar and Henderson 90]</A>. The approaches which best lend themselves to formal treatment are those which use a formal grammar to describe "syntactically correct" variations in a shape feature <A HREF="mode_160.htm#MARKER-9-180" CLASS=Body>[Pinilla et al 89]</A><A HREF="mode_160.htm#MARKER-9-184" CLASS=Body>[Safier &amp; Finger 90]</A>.</P>
<P> Several researchers have used formal grammars to work with geometric variations in features <A HREF="mode_160.htm#MARKER-9-157" CLASS=Body>[Henderson 84]</A> <A HREF="mode_160.htm#MARKER-9-180" CLASS=Body>[Pinilla et al 89]</A>. With such techniques, feature recognition involves a process of parsing. Having prepared an appropriate syntactic representation, it is necessary to define parsing operators for the grammar. The parsing of context-free string grammars is well understood in formal language theory. However, variations in features found in a three-dimensional solid are difficult to express in string grammars <A HREF="mode_160.htm#MARKER-9-180" CLASS=Body>[Pinilla et al 89]</A>. </P>
<P> Experience has shown that eliciting all potential variations of a feature is difficult; engineers are far more comfortable specifying what defines a feature than specifying all the variations that do not ultimately affect feature's classification. With these techniques, feature templates and all possible variations must be explicitly defined, whether directly as a graph or in terms of rewrite rules. It would fare better for an engineer to just describe the essential - generic - characteristics of a feature, with variations, which do not interfere with these characteristics, implicitly handled.</P>
<P> Another drawback is the computational complexity of the feature recognition process itself. Although heuristics in some algorithms provide efficiency, graph matching problems are intrinsically a sub-graph isomorphism problem and are NP-Complete <A HREF="mode_160.htm#MARKER-9-152" CLASS=Body>[Garey &amp; Johnson 79]</A>. As the number of features and permissible variations increase, the problem becomes more difficult. As the complexity of the features increases, the problem becomes intractable.</P>

</DIV>

 

<DIV>

<!-- TOC -->

</DIV>

 <DIV CLASS=WM-DIV-FOOTERS><HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>Models for Concurrent Engineering Design - 15 Jul 1997</ADDRESS>
<P><A HREF="model_52.htm" class="NavPanel pull-right">[Next]</A> <A HREF="model_50.htm" CLASS=NavPanel>[Previous]</A> <A HREF="model_50.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>

</DIV>
</div></BODY>
</HTML>
