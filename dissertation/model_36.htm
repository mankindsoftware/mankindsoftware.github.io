<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML Experimental 19960712//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental) -->
<HEAD>
<LINK REL=TOP HREF="model_1.htm">
<LINK REL=UP HREF="model_35.htm">
<LINK REL=PREV HREF="model_35.htm">
<LINK REL=NEXT HREF="model_37.htm">
<LINK TITLE="WebMaker generated style" REL=stylesheet HREF=bootstrap.min.css TYPE="text/css"><LINK TITLE="WebMaker generated style" REL=stylesheet HREF=style.css TYPE="text/css">
<TITLE>2.2.6.1   OBJECT TECHNOLOGY AND ARTIFACT-CENTERED DESIGN</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 19-May-1997 experimental)">
</HEAD>
<BODY CLASS=WM-BODY><div class="container">

  <DIV>
<A NAME=HEADING36></A>

<DIV CLASS=WM-DIV-HEADERS>
<P><A HREF="model_37.htm" class="NavPanel pull-right">[Next]</A> <A HREF="model_35.htm" CLASS=NavPanel>[Previous]</A> <A HREF="model_35.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>2.2.6   SYNTHESIS MODELS</P>

</DIV>
<A NAME=HEADING36-0></A>
<H1 CLASS=4Heading>2.2.6.1   OBJECT TECHNOLOGY AND ARTIFACT-CENTERED DESIGN</H1>
<P> Object technology is used here to define the various disciplines of the object-oriented paradigm. Object-oriented programming (OOP) techniques have spawned object-oriented analysis (OOA) and object-oriented design (OOD) techniques. There seems to be as many definitions of the object-oriented paradigm as there are object-oriented programmers. Purists, even those sullied by the hacking aspects of programming, are quick to recant the "rules" defining object-orientation. In general, object technology can be recognized as including the elements of <A HREF="#MARKER-9-19" CLASS=Body>Table 4</A>.</P>
<A NAME=HEADING36-2></A>
<H2 CLASS=Table>Table 4    <A NAME=MARKER-9-19></A>Elements of Object Technology <A HREF="mode_160.htm#MARKER-9-131" CLASS=Table>[Coad &amp; Yourdon 90]</A></H2>
<HR CLASS=Table>
<P CLASS=ETable>  Abstractions providing encapsulation of attributes and services </P>
<P CLASS=ETable>  Classification </P>
<P CLASS=ETable>  Inheritance of attributes and services</P>
<P CLASS=ETable>  Messaging used by objects to communicate.</P>
<P> How object technology is defined must not overshadow what object orientation provides. Essentially, object technology allows encapsulation of data and processing constructs for all aspects of the software life cycle. Object technology is useful in eliminating unforeseen "side effects" of program changes during development and maintenance.</P>
<P> Side effects are a major issue in software engineering. While both the result of code changes and of actual application execution may not be predictable, the scope of their effects must be. An object-oriented system creates "self-managing" entities whose capabilities are pre-specified. Services are provided by the objects themselves - as opposed to being imposed upon the objects. Essentially, a request must be made to an object requesting that some predefined routine be carried out. As such, during development or maintenance, changes to one independent object will not affect the operation of another. </P>
<P> Engineering design environments reflect programming environments. As some programming languages such as Pascal, C, or LISP are largely imperative, reflecting the sequential nature of the underlying computation mechanism, certain engineering modeling languages can likewise be thought of as imperative, with the user working through idea conception to all the details of its implementation. </P>
<P> In recent years, software abstractions have been more and more distanced from their underlying computational mechanisms. Programming languages have evolved to be declarative in nature. Like SQL, Prolog, and the spreadsheet paradigm, the concept, or high-level description is provided by the user while implementation and manifestation of results is completely handled by the computer. The correlation of the declarative approach to engineering design is found in the literature of design synthesis, where function is specified by the user and the implementation of form is generated automatically.</P>
<P> A design-with-objects approach makes use of the declarative abstractions. By way of an example, a CAE system may be provided a palette of available tools from which the designer may choose. The designer may "cut and paste" the icon of a particular tool into the process design, perhaps a particular molding machine that is available. All available information about that machine is available through the machines's representational object. The system could have on-line access to such process requirements as machine tonnage specification, shot size, machine dimensions and then perform the dimensioning of a corresponding mold in much the same manner that a word processor handles routine formatting. </P>

</DIV>

 

<DIV>

<!-- TOC --><DL CLASS=FOOTER>
<DT CLASS=FOOTER><A REL=BELOW HREF="model_36.htm#HEADING36-2" CLASS=FOOTER><B CLASS=FOOTER>Table 4   </B> - Elements of Object Technology <A HREF="mode_160.htm#MARKER-9-131" CLASS=FOOTER>[Coad &amp; Yourdon 90]</A></A>
<DD CLASS=FOOTER>
</DL>


</DIV>

 <DIV CLASS=WM-DIV-FOOTERS><HR CLASS=FOOTER>
<ADDRESS CLASS=FOOTER>Models for Concurrent Engineering Design - 15 Jul 1997</ADDRESS>
<P><A HREF="model_37.htm" class="NavPanel pull-right">[Next]</A> <A HREF="model_35.htm" CLASS=NavPanel>[Previous]</A> <A HREF="model_35.htm" CLASS="NavPanel pull-center">[Up]</A> <A HREF="model_1.htm" CLASS=NavPanel>[Top]</A>   </P>
<P>

</DIV>
</div></BODY>
</HTML>
